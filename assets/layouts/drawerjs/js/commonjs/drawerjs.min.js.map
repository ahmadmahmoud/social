{"version":3,"file":null,"sources":["../../../src/scripts/drawerjs.js"],"sourcesContent":["/**\n * A navigation drawer for mobile and web applications.\n * @class\n *\n * @example <caption>The Drawer basic template looks like:</caption>\n * <main id=\"wrapper\">\n *   <!-- the Drawer -->\n *   <aside id=\"drawerjs\" class=\"drawerjs\">\n *     <!-- your awesome navigations here... -->\n *     <h1>Drawerjs</h1>\n *   </aside>\n *   <!-- the Holder -->\n *   <section id=\"drawerjs-holder\" class=\"drawerjs-holder\">\n *     <h2>Site content</h2>\n *   </section>\n * </main>\n *\n * @example <caption>Instance the Drawer:</caption>\n * var drawer = new Drawerjs();\n */\nclass Drawerjs {\n\n  /**\n   * Create a Drawer.\n   * @constructor\n   * @param  {Object} options - An object containing key:value that representing the current Drawer.\n   */\n  constructor(options) {\n\n    /**\n     * The Drawer options.\n     * @type {Object}\n     * @property {String} align='left'                    - The Drawer position (left/right).\n     * @property {Boolean} compact=false                  - The Drawer compact mode.\n     * @property {Boolean} fixed=false                    - The Drawer fixed mode.\n     * @property {(Boolean|Object)} forcePos=false        - CSS to force the Drawer positions and dimensions. Only support `top`, `right`, `bottom`, `left`, `width`, `height`.\n     * @property {String} holder='#drawerjs-holder'       - The Holder element selector, usually targeted to site/app main content. Set to `false` if you haven't a holder, the Drawer will refer to document body.\n     * @property {String} holderClass='drawerjs-holder'   - The css class name that will added to holder selector automatically.\n     * @property {Boolean} nested=false                   - Indicator for nested Drawer. Set to `true` to use nested Drawer.\n     * @property {Boolean} open=false                     - Open/close the Drawer.\n     * @property {Boolean} pinned=false                   - If `true`, it's transform the Drawer to push/pull navigation when open/close the Drawer.\n     * @property {String} selector='#drawerjs'            - The Drawer element selector.\n     * @property {String} selectorClass='drawerjs'        - The css class name that will be added to the Drawer and used for css prefix classes.\n     * @property {(Number|String)} width='200px'          - The Drawer width for default size. Support for any css units like `rem`, `em`, or `%`.\n     * @property {(Number|String)} compactWidth='60px'    - The Drawer width for compact size. Support for any css units like `rem`, `em`, or `%`.\n     * @property {(Boolean|Object)} useCustom=false       - Use custom skins on the Drawer and the Holder. Both are support `backgroundColor` and `color` properties.\n     * @property {(Boolean|String)} autoConfig=false      - The Drawer can remember the previous options. So it still have the current states even on page reload or closing the browser. Give it the `unique string` (for storage namescpace) will enable this feature and set to `false` will disable it.\n     * @property {Boolean} holderBehavior=true            - If Activated, the Holder will translate the content when screen width < `toggleScreen` instead of using content space (You may want to disable this behavior when work with multiple drawer).\n     * @property {(Number|String)} toggleScreen='992px'   - The Drawer use it to initialize the default options, depend on screen sizes. When screen width < `toggleScreen` the Drawer will used default options for mobile.\n     * @property {Boolean} backdrop=true                  - Enable/disable the Drawer backdrop. When this property is `false` the unpinned drawer will not automatically closed on outside click.\n     * @example\n     * var options = {\n     *   align: 'left',\n     *   compact: true,\n     *   fixed: true,\n     *   useCustom: {\n     *     drawer: {\n     *       backgroundColor: '#fff',\n     *       color: '#000'\n     *     },\n     *     holder: {\n     *       backgroundColor: '#fff',\n     *       color: '#000'\n     *     }\n     *   }\n     * };\n     *\n     * var drawer = new Drawerjs(options);\n     */\n    this.options = {\n      align: 'left',\n      compact: false,\n      fixed: false,\n      forcePos: false,\n      holder: '#drawerjs-holder',\n      holderClass: 'drawerjs-holder',\n      nested: false,\n      open: false,\n      pinned: false,\n      selector: '#drawerjs',\n      selectorClass: 'drawerjs',\n      width: '200px',\n      compactWidth: '60px',\n      useCustom: false,\n      // be careful when edit below property\n      autoConfig: false,\n      _cleanStorage: false,\n      holderBehavior: true,\n      toggleScreen: '992px',\n      backdrop: true\n    }\n\n    options = options || {}\n\n    // validate width, mush have valid css unit\n    options.width = options.width ? this._validateUnit(options.width) : this.options.width\n    options.compactWidth = options.compactWidth ? this._validateUnit(options.compactWidth) : this.options.compactWidth\n\n    // force this.options depend on screen size (toggle at min-width: 992px by default)\n    if (window.matchMedia) {\n      this.options.fixed = !matchMedia(`only screen and (min-width: ${this._validateUnit(this.options.toggleScreen)})`).matches\n      this.options.open = matchMedia(`only screen and (min-width: ${this._validateUnit(this.options.toggleScreen)})`).matches\n      this.options.pinned = matchMedia(`only screen and (min-width: ${this._validateUnit(this.options.toggleScreen)})`).matches\n    }\n\n    // mixed default and custom options\n    this.options = this._extend({}, this.options, options)\n    // force options if drawer have an autoConfig options\n    this.options = (this._getState() === null) ? this.options : this._getState()\n\n    /**\n     * The Drawer element.\n     * @type {Element}\n     */\n    this.selector = typeof this.options.selector === 'object' ? this.options.selector : document.querySelector(this.options.selector)\n\n    /**\n     * The Drawer holder.\n     * If option set to `false`, the Holder will be refer to document body. Its usefull for multiple drawer instance.\n     * @type {Element}\n     */\n    this.holder = (!this.options.holder)\n      ? document.querySelector('body')\n      : document.querySelector(this.options.holder)\n\n    /**\n     * The Drawer wrapper.\n     * @type {Element}\n     */\n    this.wrapper = this.holder.parentNode\n\n    /**\n     * The Drawer uniq ID.\n     * @type {String}\n     */\n    this.hash = Math.random().toString(36).substring(7)\n\n    /**\n     * Lists of feature classes that will be added to the Drawer depend to current options.\n     * Used selectorClass for prefix.\n     * @type {Object}\n     */\n    this.classes = {\n      alignRight: this.options.selectorClass + '-has-right',\n      compact: this.options.selectorClass + '-has-compact',\n      fixed: this.options.selectorClass + '-has-fixed',\n      open: this.options.selectorClass + '-has-open',\n      close: this.options.selectorClass + '-has-close',\n      slideIn: this.options.selectorClass + '-has-slideIn',\n      pinned: this.options.selectorClass + '-has-pinned',\n      wrapper: this.options.selectorClass + '-wrapper'\n    }\n\n    // Initialization\n    this.init()\n  }\n\n  /** Private methods */\n  /**\n   * Listen on document when the page is ready.\n   * @private\n   * @param  {Function} handler - The callback function when page is ready.\n   * @return {void}\n   */\n  _onReady(handler) {\n    if(document.readyState != 'loading') {\n      handler()\n    } else {\n      document.addEventListener('DOMContentLoaded', handler, false)\n    }\n  }\n\n  /**\n   * Merge the contents of two or more objects together into the first object.\n   * @private\n   * @param  {Object} obj - An object containing additional properties to merge in.\n   * @return {Object} The merged object.\n   */\n  _extend(obj) {\n    obj = obj || {}\n    const args = arguments\n    for (let i = 1; i < args.length; i++) {\n      if (!args[i]) continue\n      for (let key in args[i]) {\n        if (args[i].hasOwnProperty(key))\n          obj[key] = args[i][key]\n      }\n    }\n    return obj\n  }\n\n  /**\n   * Validate unit value to support Drawer rules.\n   * @private\n   * @param  {(Number|String)} unit - Unit value to validate.\n   * @return {Boolean} Has valid unit.\n   */\n  _validateUnit(unit) {\n    const expr = /(^[\\d]+((px)|(vw)|(r?em)|(\\%))$)|^(initial|inherit|auto|0)$/i\n    return expr.test(unit) ? unit : `${/[^\\.\\sa-z]\\d*\\.?\\d*/g.exec(unit)[0]}px`\n  }\n\n  /**\n   * Attach an event to Drawer selector.\n   * @private\n   * @param  {String} type - The name of the event (case-insensitive).\n   * @param  {(Boolean|Number|String|Array|Object)} data - The custom data that will be added to event.\n   * @return {void}\n   */\n  _emit(type, data) {\n    let e\n    if (document.createEvent) {\n      e = document.createEvent('Event')\n      e.initEvent(type, true, true)\n    } else {\n      e = document.createEventObject()\n      e.eventType = type\n    }\n    e.eventName = type\n    e.data = data || this\n    // attach event to selector\n    document.createEvent\n      ? this.selector.dispatchEvent(e)\n      : this.selector.fireEvent('on' + type, e)\n  }\n\n  /**\n   * Registers the specified listener on the element.\n   * @private\n   * @param  {Element} el - The target element.\n   * @param  {String} type - The name of the event.\n   * @param  {Function} handler - The callback function when event type is fired.\n   * @return {void}\n   */\n  _on(el, type, handler) {\n    let types = type.split(' ')\n    for (let i = 0; i < types.length; i++) {\n      el[window.addEventListener ? 'addEventListener' : 'attachEvent']( window.addEventListener ? types[i] : `on${types[i]}` , handler, false)\n    }\n  }\n\n  /**\n   * Removes the event listener previously registered with [_on()]{@link Drawerjs#_on} method.\n   * @private\n   * @param  {Element} el - The target element.\n   * @param  {String} type - The name of the event.\n   * @param  {Function} handler - The callback function when event type is fired.\n   * @return {void}\n   */\n  _off(el, type, handler) {\n    let types = type.split(' ')\n    for (let i = 0; i < types.length; i++) {\n      el[window.removeEventListener ? 'removeEventListener' : 'detachEvent']( window.removeEventListener ? types[i] : `on${types[i]}` , handler, false)\n    }\n  }\n\n  /**\n   * Adds one or more class names to the target element.\n   * @private\n   * @param {Element} el - The target element.\n   * @param {String} className - Specifies one or more class names to be added.\n   * @return {void}\n   */\n  _addClass(el, className) {\n    let classes = className.split(' ')\n    for (let i = 0; i < classes.length; i++) {\n      if (el.classList) el.classList.add(classes[i])\n      else el.classes[i] += ' ' + classes[i]\n    }\n  }\n\n  /**\n   * Removes one or more class names to the target element.\n   * @private\n   * @param {Element} el - The target element.\n   * @param {String} className - Specifies one or more class names to be added.\n   * @return {void}\n   */\n  _removeClass(el, className) {\n    let classes = className.split(' ')\n    for (let i = 0; i < classes.length; i++) {\n      if (el.classList) el.classList.remove(classes[i])\n      else el.classes[i] = el.classes[i].replace(new RegExp('(^|\\\\b)' + classes[i].split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ')\n    }\n  }\n\n  /**\n   * Get the current Drawer width.\n   * @private\n   * @param  {Boolean} isCompact - The current value of compact value.\n   * @return {String} The current Drawer width.\n   */\n  _drawerWidth(isCompact) {\n    return isCompact ? this.options.compactWidth : this.options.width\n  }\n\n  /**\n   * Apply the current Drawer width.\n   * @private\n   * @return {void}\n   */\n  _renderWidth() {\n    this.selector.style.width = this._drawerWidth(this.isCompact())\n  }\n\n  /**\n   * Clear the Holder space.\n   * @private\n   * @return {void}\n   */\n  _clearSpace() {\n    // for holder = body\n    this.holder.style.paddingRight = 0\n    this.holder.style.paddingLeft = 0\n    // for holder = specific element\n    this.holder.style.marginRight = 0\n    this.holder.style.marginLeft = 0\n    // for screen width < toggleScreen\n    this.holder.style.transform = ''\n  }\n\n  /**\n   * Give space to the Holder.\n   * @private\n   * @return {void}\n   */\n  _holderSpace() {\n    let opts = this.options\n    let space = !opts.holder ? 'padding' : 'margin'\n    // clear space\n    this._clearSpace()\n    // holder behavior: translate holder instead of adding space on screen width < toggleScreen\n    if (opts.holderBehavior && !this.isCompact() && !matchMedia(`only screen and (min-width: ${this._validateUnit(this.options.toggleScreen)})`).matches) {\n      if (opts.pinned && opts.open) {\n        if (opts.align === 'right') {\n          this.holder.style.transform = `translateX(-${this._drawerWidth(this.isCompact())})`\n        } else if(opts.align === 'left') {\n          this.holder.style.transform = `translateX(${this._drawerWidth(this.isCompact())})`\n        }\n      }\n    } else {\n      // add space by align\n      if (opts.pinned && opts.open) {\n        if (opts.align === 'right') {\n          this.holder.style[`${space}Right`] = this._drawerWidth(this.isCompact())\n        } else if(opts.align === 'left') {\n          this.holder.style[`${space}Left`] = this._drawerWidth(this.isCompact())\n        }\n      }\n    }\n  }\n\n  /**\n   * Add/remove the current Drawer backdrop depend with pinned option.\n   * @private\n   * @return {void}\n   */\n  _backdrop() {\n    const self = this\n    const hashId = `backdrop-${this.hash}`\n    let opts = this.options\n    let body = document.querySelector('body')\n    let el = document.createElement('div')\n\n    el.setAttribute('id', hashId)\n    this._addClass(el, `${opts.selectorClass}-backdrop`)\n\n    if (!this.isPinned() && opts.backdrop) {\n      let backdropEl = document.querySelector(`#${hashId}`)\n      if (!body.contains(backdropEl)) {\n        body.appendChild(el)\n        this._on(el, 'click', () => {\n          self.close()\n        })\n      }\n      if (this.isOpen()) {\n        document.querySelector(`#${hashId}`).style.display = 'block'\n      }\n    } else {\n      let backdropEl = document.querySelector(`#${hashId}`)\n      if (body.contains(backdropEl)) backdropEl.parentNode.removeChild(backdropEl)\n    }\n  }\n\n  /**\n   * A transition that is used when open the Drawer.\n   * @private\n   * @return {void}\n   */\n  _transitionIn() {\n    this._addClass(this.selector, this.classes.slideIn)\n    this.selector.style.width = this._drawerWidth(this.isCompact())\n    // transitionIn when forcePos.height is exist\n    const pos = this.options.forcePos\n    if (pos.hasOwnProperty('height')) this.selector.style.height = pos.height\n  }\n\n  /**\n   * A transition that is used when close the Drawer.\n   * @private\n   * @return {void}\n   */\n  _transitionOut() {\n    this._removeClass(this.selector, this.classes.slideIn)\n    this.selector.style.width = 0\n    // transitionIn when forcePos.height is exist\n    const pos = this.options.forcePos\n    if (pos.hasOwnProperty('height')) this.selector.style.height = 0\n  }\n\n  /**\n   * Get the correct transitionend event for any browser.\n   * @private\n   * @param  {Element} el - The target element.\n   * @return {String} The name of the transitionend.\n   */\n  _transitionEnd(el) {\n    const transEndEventNames = {\n      'WebkitTransition' : 'webkitTransitionEnd',\n      'MozTransition'    : 'transitionend',\n      'OTransition'      : 'oTransitionEnd otransitionend',\n      'transition'       : 'transitionend'\n    }\n    for (let name in transEndEventNames) {\n      if (el.style[name] !== undefined) {\n        return transEndEventNames[name]\n      }\n    }\n  }\n\n  /**\n   * Set the Drawer wrapper background color same as the Drawer.\n   * @private\n   * @return {void}\n   */\n  _addFakeHeight() {\n    const backgroundColor = window.getComputedStyle(this.selector).backgroundColor\n    this.wrapper.style.backgroundColor = backgroundColor\n  }\n\n  /**\n   * Remove the Drawer wrapper background color given by [_addFakeHeight()]{@link Drawerjs#_addFakeHeight} method.\n   * @private\n   * @return {void}\n   */\n  _removeFakeHeight() {\n    this.wrapper.style.backgroundColor = ''\n  }\n\n  /**\n   * Update the current state options.\n   * @private\n   * @since 1.2.0\n   * @param {String} key - Options property key.\n   * @param {(Boolean|Number|String|Object)} value - Options property value.\n   * @return {void}\n   */\n  _setState(key, value) {\n\n    if (key)\n      this.options[key] = value\n\n    // store to localstorage, only store if string\n    if (typeof this.options.autoConfig === 'string' || this.options.autoConfig instanceof String)\n      localStorage.setItem(`drawerjs_${this.options.autoConfig}`, JSON.stringify(this.options))\n\n    /**\n     * This event is fired when the Drawer options has changed.\n     *\n     * @event Drawerjs#drawer:stateChanged\n     * @type {Object}\n     * @property {Object} data - The Drawerjs data instance.\n     *\n     * @example\n     * document.querySelector('#drawerjs').addEventListener('drawer:stateChanged', function(e) {\n     *   console.log(e.data);\n     * });\n     * @example <caption>Or using jQuery:</caption>\n     * $('#drawerjs').on('drawer:stateChanged', function() {\n     *   console.log('fired on drawer:stateChanged!!');\n     * });\n     */\n    this._emit('drawer:stateChanged')\n  }\n\n  /**\n   * Get the current state options.\n   * @private\n   * @since 1.2.0\n   * @return  {Object} The current state options.\n   */\n  _getState() {\n    return JSON.parse(localStorage.getItem(`drawerjs_${this.options.autoConfig}`))\n  }\n\n\n  /** Public methods */\n  /**\n   * The first process that called after constructs the Drawer instance.\n   * @public\n   * @fires Drawerjs#drawer:init\n   * @return {void}\n   */\n  init() {\n    const self = this\n    let opts = this.options\n\n    this._addClass(this.selector, opts.selectorClass)\n    this._addClass(this.holder, opts.holderClass)\n    this._addClass(this.wrapper, this.classes.wrapper)\n\n    // give default width\n    this._renderWidth()\n    // hold transition, hide transition on init\n    this._addClass(this.selector, `${opts.selectorClass}-hold-transition`)\n    this._addClass(this.holder, `${opts.selectorClass}-hold-transition`)\n    // trigger transition\n    this._on(this.selector, this._transitionEnd(this.selector), () => {\n      if(!self.isOpen()) {\n        self.selector.style.opacity = '0'\n        self.selector.style.visibility = 'hidden'\n      }\n    })\n    // stop anaimateEnd bubling event\n    if (this.selector.hasChildNodes()) {\n      let children = this.selector.children\n      Array.prototype.forEach.call(children, el => {\n        self._on(el, self._transitionEnd(el), e => {\n          e.stopPropagation()\n        })\n      })\n    }\n\n    // is nested\n    if (opts.nested) {\n      this.wrapper.style.position = 'relative'\n    }\n\n    // implement autoConfig feature\n    this.autoConfig(opts.autoConfig)\n    // implement placement feature\n    this.align(opts.align)\n    // implement compact feature\n    this.compact(opts.compact)\n    // implement fixed feature\n    this.fixed(opts.fixed)\n    // force css position\n    this.forcePos(opts.forcePos)\n    // implement pinned feature\n    this.pinned(opts.pinned)\n    // use custom\n    this.custom(opts.useCustom)\n    // implement show/hide feature\n    this.isOpen() ? this.open() : this.close()\n\n    // update states\n    this._setState()\n\n    // on ready state\n    this._onReady(() => {\n      // resume transition\n      setTimeout(() => {\n        self._removeClass(self.selector, `${opts.selectorClass}-hold-transition`)\n        self._removeClass(self.holder, `${opts.selectorClass}-hold-transition`)\n      }, 150)\n\n      /**\n       * This event is fired when the Drawer has completed init.\n       *\n       * @event Drawerjs#drawer:init\n       * @type {Object}\n       * @property {Object} data - The Drawerjs data instance.\n       *\n       * @example\n       * document.querySelector('#drawerjs').addEventListener('drawer:init', function(e) {\n       *   console.log(e.data);\n       * });\n       * @example <caption>Or using jQuery:</caption>\n       * $('#drawerjs').on('drawer:init', function() {\n       *   console.log('fired on drawer:init!!');\n       * });\n       */\n      self._emit('drawer:init')\n    })\n  }\n\n  /**\n   * Turn on/off auto config feature.\n   *\n   * **Note:** Set `autoConfig` to `true` will not enable this feature. You must give a (unique) string instead.\n   * @since 1.2.0\n   *\n   * @param  {(Boolean/String)} namespace A unique string to enable this feature or boolean `false` to disable it.\n   * @return {Object} The Drawer instance.\n   *\n   * @example\n   * drawer.autoConfig('myDrawerNavigation');\n   */\n  autoConfig(namespace) {\n    try {\n      if(namespace === true) {\n        throw {\n          name: 'Drawerjs Warning',\n          msg: 'You must have a unique namescpace for each Drawer!'\n        }\n      }\n    }\n    catch(err) {\n      console.warn(`${err.name}: ${err.msg}`)\n    }\n\n    // remove previous storage if any\n    if(this.options.autoConfig && this.options._cleanStorage)\n      localStorage.removeItem(`drawerjs_${this.options.autoConfig}`)\n\n    // update states\n    this._setState('autoConfig', namespace)\n\n    /**\n     * This event is fired when the Drawer turn on/off autoConfig feature.\n     *\n     * @event Drawerjs#drawer:autoConfig\n     * @type {Object}\n     * @property {Object} data - The Drawerjs data instance.\n     *\n     * @example\n     * document.querySelector('#drawerjs').addEventListener('drawer:autoConfig', function(e) {\n     *   console.log(e.data);\n     * });\n     * @example <caption>Or using jQuery:</caption>\n     * $('#drawerjs').on('drawer:autoConfig', function() {\n     *   console.log('fired on drawer:autoConfig!!');\n     * });\n     */\n    this._emit('drawer:autoConfig')\n\n    return this\n  }\n\n  /**\n   * Set the Drawer position to `left` or `right`.\n   * @public\n   * @fires Drawerjs#drawer:align\n   * @param  {String} position - The position that will be set to the Drawer.\n   * @return {Object} The Drawer instance.\n   *\n   * @example\n   * drawer.align('right');\n   */\n  align(position) {\n    const classes = this.classes\n\n    if (position === 'right') {\n      this._addClass(this.selector, classes.alignRight)\n    } else {\n      this._removeClass(this.selector, classes.alignRight)\n    }\n\n    // update states\n    this._setState('align', position)\n\n    // refresh holder space\n    this._holderSpace()\n\n    /**\n     * This event is fired when the Drawer has changed position.\n     *\n     * @event Drawerjs#drawer:align\n     * @type {Object}\n     * @property {Object} data - The Drawerjs data instance.\n     *\n     * @example\n     * document.querySelector('#drawerjs').addEventListener('drawer:align', function(e) {\n     *   console.log(e.data);\n     * });\n     * @example <caption>Or using jQuery:</caption>\n     * $('#drawerjs').on('drawer:align', function() {\n     *   console.log('fired on drawer:align!!');\n     * });\n     */\n    this._emit('drawer:align')\n\n    return this\n  }\n\n  /**\n   * Determine whether the Drawer is currently compact.\n   * @public\n   * @return {Boolean} is compact.\n   *\n   * @example\n   * var isCompact = drawer.isCompact();\n   */\n  isCompact() {\n    return this.options.compact\n  }\n\n  /**\n   * Toggle the Drawer compact mode.\n   * @public\n   * @fires Drawerjs#drawer:compact\n   * @param  {Boolean} isCompact - The compact mode.\n   * @return {Object} The Drawer instance.\n   *\n   * @example\n   * drawer.compact(true);\n   */\n  compact(isCompact) {\n    const method = (isCompact) ? '_addClass': '_removeClass'\n    const classes = this.classes\n\n    this[method](this.selector, classes.compact)\n\n    // update states\n    this._setState('compact', isCompact)\n\n    // draw current width\n    this._renderWidth()\n    // refresh holder space\n    this._holderSpace()\n\n    /**\n     * This event is fired when the Drawer has completed toggle compact mode.\n     *\n     * @event Drawerjs#drawer:compact\n     * @type {Object}\n     * @property {Object} data - The Drawerjs data instance.\n     *\n     * @example\n     * document.querySelector('#drawerjs').addEventListener('drawer:compact', function(e) {\n     *   console.log(e.data);\n     * });\n     * @example <caption>Or using jQuery:</caption>\n     * $('#drawerjs').on('drawer:compact', function() {\n     *   console.log('fired on drawer:compact!!');\n     * });\n     */\n    this._emit('drawer:compact')\n\n    return this\n  }\n\n  /**\n   * Determine whether the Drawer is currently fixed.\n   * @public\n   * @return {Boolean} Is fixed.\n   *\n   * @example\n   * var isFixed = drawer.isFixed();\n   */\n  isFixed() {\n    return this.options.fixed\n  }\n\n  /**\n   * Toggle the Drawer fixed mode.\n   * @public\n   * @fires Drawerjs#drawer:fixed\n   * @param  {Boolean} isFixed - The fixed mode.\n   * @return {Object} The Drawer instance.\n   *\n   * @example\n   * drawer.fixed(true);\n   */\n  fixed(isFixed) {\n    const method = (isFixed) ? '_addClass': '_removeClass'\n    const classes = this.classes\n\n    // just added fake synchronous backgroundColor to wrapper\n    isFixed ? this._removeFakeHeight() : this._addFakeHeight()\n    this[method](this.selector, classes.fixed)\n    // force redraw/repaint to fixed -webkit- overflow render\n    this.selector.style.display = 'none'\n    this.selector.offsetHeight\n    this.selector.style.display = ''\n\n    // update states\n    this._setState('fixed', isFixed)\n\n    /**\n     * This event is fired when the Drawer has completed toggle fixed mode.\n     *\n     * @event Drawerjs#drawer:fixed\n     * @type {Object}\n     * @property {Object} data - The Drawerjs data instance.\n     *\n     * @example\n     * document.querySelector('#drawerjs').addEventListener('drawer:fixed', function(e) {\n     *   console.log(e.data);\n     * });\n     * @example <caption>Or using jQuery:</caption>\n     * $('#drawerjs').on('drawer:fixed', function() {\n     *   console.log('fired on drawer:fixed!!');\n     * });\n     */\n    this._emit('drawer:fixed')\n\n    return this\n  }\n\n  /**\n   * Whether the Drawer is currently open.\n   * @public\n   * @return {Boolean} Is open.\n   *\n   * @example\n   * var isOpen = drawer.isOpen();\n   */\n  isOpen() {\n    return this.options.open\n  }\n\n  /**\n   * Open/show the Drawer.\n   * @public\n   * @fires Drawerjs#drawer:open\n   * @return {Object} The Drawer instance.\n   *\n   * @example\n   * drawer.open();\n   */\n  open() {\n    const classes = this.classes\n\n    this._transitionIn()\n    this._addClass(this.selector, classes.open)\n    this._removeClass(this.selector, classes.close)\n    this.selector.style.overflow = ''\n    this.selector.style.opacity = ''\n    this.selector.style.visibility = ''\n    // show backdrop\n    if (!this.isPinned() && this.options.backdrop) {\n      const backdrop = document.querySelector(`#backdrop-${this.hash}`)\n      backdrop.style.display = 'block'\n    }\n\n    // update states\n    this._setState('open', true)\n\n    // refresh holder space\n    this._holderSpace()\n\n    /**\n     * This event is fired when the Drawer has open.\n     *\n     * @event Drawerjs#drawer:open\n     * @type {Object}\n     * @property {Object} data - The Drawerjs data instance.\n     *\n     * @example\n     * document.querySelector('#drawerjs').addEventListener('drawer:open', function(e) {\n     *   console.log(e.data);\n     * });\n     * @example <caption>Or using jQuery:</caption>\n     * $('#drawerjs').on('drawer:open', function() {\n     *   console.log('fired on drawer:open!!');\n     * });\n     */\n    this._emit('drawer:open')\n\n    return this\n  }\n\n  /**\n   * Close/hide the Drawer.\n   * @public\n   * @fires Drawerjs#drawer:close\n   * @return {Object} The Drawer instance.\n   *\n   * @example\n   * drawer.close();\n   */\n  close() {\n    const classes = this.classes\n\n    this._transitionOut()\n    this._addClass(this.selector, classes.close)\n    this._removeClass(this.selector, classes.open)\n    this.selector.style.overflow = 'hidden'\n    // hide backdrop\n    if (!this.isPinned() && this.options.backdrop) {\n      const backdrop = document.querySelector(`#backdrop-${this.hash}`)\n      backdrop.style.display = ''\n    }\n\n    // update states\n    this._setState('open', false)\n\n    // refresh holder space\n    this._holderSpace()\n\n    /**\n     * This event is fired when the Drawer has close.\n     *\n     * @event Drawerjs#drawer:close\n     * @type {Object}\n     * @property {Object} data - The Drawerjs data instance.\n     *\n     * @example\n     * document.querySelector('#drawerjs').addEventListener('drawer:close', function(e) {\n     *   console.log(e.data);\n     * });\n     * @example <caption>Or using jQuery:</caption>\n     * $('#drawerjs').on('drawer:close', function() {\n     *   console.log('fired on drawer:close!!');\n     * });\n     */\n    this._emit('drawer:close')\n\n    return this\n  }\n\n  /**\n   * Toggle open/close the Drawer. This method trigger both `open` and `close` event.\n   * @public\n   * @fires Drawerjs#drawer:open\n   * @fires Drawerjs#drawer:close\n   * @return {Object} The Drawer instance.\n   *\n   * @example\n   * drawer.toggle();\n   */\n  toggle() {\n    const method = (!this.isOpen()) ? 'open' : 'close'\n\n    this[method]()\n\n    return this\n  }\n\n  /**\n   * Determine whether the Drawer is currently pinned.\n   * @public\n   * @return {Boolean} Is pinned.\n   *\n   * @example\n   * var isPinned = drawer.isPinned();\n   */\n  isPinned() {\n    return this.options.pinned\n  }\n\n  /**\n   * Toggle the Drawer pinned mode.\n   * @public\n   * @fires Drawerjs#drawer:pinned\n   * @param  {Boolean} isPinned - The pinned mode.\n   * @return {Object} The Drawer instance.\n   *\n   * @example\n   * drawer.pinned(true);\n   */\n  pinned(isPinned) {\n    const method = (isPinned) ? '_addClass': '_removeClass'\n    const classes = this.classes\n\n    this[method](this.selector, classes.pinned)\n\n    // update states\n    this._setState('pinned', isPinned)\n\n    // add/remove backdrop\n    this._backdrop()\n    // refresh holder space\n    this._holderSpace()\n\n    /**\n     * This event is fired when the Drawer has completed toggle pinned.\n     *\n     * @event Drawerjs#drawer:pinned\n     * @type {Object}\n     * @property {Object} data - The Drawerjs data instance.\n     *\n     * @example\n     * document.querySelector('#drawerjs').addEventListener('drawer:pinned', function(e) {\n     *   console.log(e.data);\n     * });\n     * @example <caption>Or using jQuery:</caption>\n     * $('#drawerjs').on('drawer:pinned', function() {\n     *   console.log('fired on drawer:pinned!!');\n     * });\n     */\n    this._emit('drawer:pinned')\n\n    return this\n  }\n\n\n  /** Behavior methods */\n  /**\n   * Get the default Drawer width.\n   * @public\n   * @return {String} CSS unit value.\n   *\n   * @example\n   * var width = drawer.getWidth();\n   */\n  getWidth() {\n    return this.options.width\n  }\n\n  /**\n   * Set the default Drawer width.\n   * @public\n   * @fires Drawerjs#drawer:changeWidth\n   * @param {(Number|String)} width - The Drawer width.\n   * @return {Object} The Drawer instance.\n   *\n   * @example\n   * drawer.setWidth('300px');\n   */\n  setWidth(width) {\n    // update states\n    this._setState('width', this._validateUnit(width))\n\n    // refresh width\n    this._renderWidth()\n    // refresh holder space\n    this._holderSpace()\n\n    /**\n     * This event is fired when the Drawer has changed width.\n     *\n     * @event Drawerjs#drawer:changeWidth\n     * @type {Object}\n     * @property {Object} data - The Drawerjs data instance.\n     *\n     * @example\n     * document.querySelector('#drawerjs').addEventListener('drawer:changeWidth', function(e) {\n     *   console.log(e.data);\n     * });\n     * @example <caption>Or using jQuery:</caption>\n     * $('#drawerjs').on('drawer:changeWidth', function() {\n     *   console.log('fired on drawer:changeWidth!!');\n     * });\n     */\n    this._emit('drawer:changeWidth')\n\n    return this\n  }\n\n  /**\n   * Get the compact Drawer width.\n   * @public\n   * @return {String} CSS unit value.\n   *\n   * @example\n   * var compactWidth = drawer.getCompactWidth();\n   */\n  getCompactWidth() {\n    return this.options.compactWidth\n  }\n\n  /**\n   * Set the compact Drawer width.\n   * @public\n   * @fires Drawerjs#drawer:changeCompactWidth\n   * @param {(Number|String)} width - The Drawer width.\n   * @return {Object} The Drawer instance.\n   *\n   * @example\n   * drawer.setCompactWidth(100);\n   */\n  setCompactWidth(width) {\n    // update states\n    this._setState('compactWidth', this._validateUnit(width))\n\n    // refresh width\n    this._renderWidth()\n    // refresh holder space\n    this._holderSpace()\n\n    /**\n     * This event is fired when the Drawer has changed compact width.\n     *\n     * @event Drawerjs#drawer:changeCompactWidth\n     * @type {Object}\n     * @property {Object} data - The Drawerjs data instance.\n     *\n     * @example\n     * document.querySelector('#drawerjs').addEventListener('drawer:changeCompactWidth', function(e) {\n     *   console.log(e.data);\n     * });\n     * @example <caption>Or using jQuery:</caption>\n     * $('#drawerjs').on('drawer:changeCompactWidth', function() {\n     *   console.log('fired on drawer:changeCompactWidth!!');\n     * });\n     */\n    this._emit('drawer:changeCompactWidth')\n\n    return this\n  }\n\n  /**\n   * Adds css property to force Drawer positions and dimentions.\n   * @public\n   * @fires Drawerjs#drawer:forcePos\n   * @param {Boolean|Object} pos - Only support CSS properties below:\n   * @param {(Number|String)} pos.top       - CSS top property (default unit is `px`).\n   * @param {(Number|String)} pos.right     - CSS right property (default unit is `px`).\n   * @param {(Number|String)} pos.bottom    - CSS bottom property (default unit is `px`).\n   * @param {(Number|String)} pos.left      - CSS left property (default unit is `px`).\n   * @param {(Number|String)} pos.width     - CSS width property (default unit is `px`).\n   * @param {(Number|String)} pos.height    - CSS height property (default unit is `px`).\n   * @return {Object} The Drawer instance.\n   *\n   * @example\n   * drawer.forcePos({\n   *   top: '60px'\n   * });\n   */\n  forcePos(pos) {\n    const self = this\n\n    if (typeof pos === 'object') {\n      for(let key in pos) {\n        let expr = /^(top|left|right|bottom|width|height)$/g\n        if (expr.test(key)) {\n          self.selector.style.minHeight = 0\n          self.selector.style[key] = self._validateUnit(pos[key])\n        }\n        else {\n          console.warn(`This method doesn't support for css ${key}. Only support for top|right|bottom|left|width|height.`)\n        }\n      }\n      // special prop\n      if(pos.hasOwnProperty('height')) this.selector.style.minHeight = 0\n      if(pos.hasOwnProperty('width')) this.setWidth(pos['width'])\n      if((pos.hasOwnProperty('top') || pos.hasOwnProperty('bottom')) && pos.hasOwnProperty('right') && pos.hasOwnProperty('left')) this.selector.style.transition = 'height 150ms linear'\n      if(pos.hasOwnProperty('right') && pos.hasOwnProperty('left')) {\n        this.selector.style.maxWidth = '100%'\n        this.selector.style.transform = 'translateX(0)'\n      }\n    } else {\n      // reset force position\n      this.selector.style.maxWidth = ''\n      this.selector.style.minHeight = ''\n      this.selector.style.transform = ''\n      this.selector.style.transition = ''\n      this.selector.style.top = ''\n      this.selector.style.right = ''\n      this.selector.style.bottom = ''\n      this.selector.style.left = ''\n    }\n\n    // update states\n    this._setState('forcePos', pos)\n\n    /**\n     * This event is fired when the Drawer has force position.\n     *\n     * @event Drawerjs#drawer:forcePos\n     * @type {Object}\n     * @property {Object} data - The Drawerjs data instance.\n     *\n     * @example\n     * document.querySelector('#drawerjs').addEventListener('drawer:forcePos', function(e) {\n     *   console.log(e.data);\n     * });\n     * @example <caption>Or using jQuery:</caption>\n     * $('#drawerjs').on('drawer:forcePos', function() {\n     *   console.log('fired on drawer:forcePos!!');\n     * });\n     */\n    this._emit('drawer:forcePos')\n\n    return this\n  }\n\n  /**\n   * Custom using css property for the Drawer and the Holder.\n   * @public\n   * @fires Drawerjs#drawer:custom\n   * @param {(Boolean|Object)} useCustom - The Drawer custom property.\n   * @param {String} useCustom.drawer.backgroundColor - The Drawer backgroundColor property.\n   * @param {String} useCustom.drawer.color           - The Drawer color property.\n   * @param {String} useCustom.holder.backgroundColor - The Holder backgroundColor property.\n   * @param {String} useCustom.holder.color           - The Holder color property.\n   * @return {Object} The Drawer instance.\n   *\n   * @example\n   * drawer.custom({\n   *   drawer: {\n   *     backgroundColor: '#f7f7f7',\n   *     color: '#333'\n   *   }\n   * });\n   */\n  custom(useCustom) {\n    const self = this\n\n    if (useCustom.hasOwnProperty('drawer') || useCustom.hasOwnProperty('holder')) {\n      for(let elem in useCustom) {\n        for(let prop in useCustom[elem]) {\n          let regElem = /^(drawer|holder)$/g\n          let regProp = /^(backgroundColor|color)$/g\n          let target = elem === 'drawer' ? 'selector' : 'holder'\n          if (regElem.test(elem) && regProp.test(prop)) self[target].style[prop] = useCustom[elem][prop]\n          else console.warn(`Unsupported property in useCustom: ${elem} or ${prop} is not a supported property.`)\n        }\n      }\n      // re-touch the wrapper\n      this._addFakeHeight()\n    } else {\n      this.selector.style.backgroundColor = ''\n      this.selector.style.color = ''\n      this.holder.style.backgroundColor = ''\n      this.holder.style.color = ''\n      // re-touch the wrapper\n      this._removeFakeHeight()\n    }\n\n    // update states\n    this._setState('useCustom', useCustom)\n\n    /**\n     * This event is fired when the Drawer has customized.\n     *\n     * @event Drawerjs#drawer:custom\n     * @type {Object}\n     * @property {Object} data - The Drawerjs data instance.\n     *\n     * @example\n     * document.querySelector('#drawerjs').addEventListener('drawer:custom', function(e) {\n     *   console.log(e.data);\n     * });\n     * @example <caption>Or using jQuery:</caption>\n     * $('#drawerjs').on('drawer:custom', function() {\n     *   console.log('fired on drawer:custom!!');\n     * });\n     */\n    this._emit('drawer:custom')\n\n    return this\n  }\n}\n\nexport default Drawerjs\n"],"names":["Drawerjs","options","this","align","compact","fixed","forcePos","holder","holderClass","nested","open","pinned","selector","selectorClass","width","compactWidth","useCustom","autoConfig","_cleanStorage","holderBehavior","toggleScreen","backdrop","_validateUnit","window","matchMedia","matches","_extend","_getState","document","querySelector","wrapper","parentNode","hash","Math","random","toString","substring","classes","alignRight","close","slideIn","init","_onReady","handler","readyState","addEventListener","obj","let","args","arguments","i","length","key","hasOwnProperty","unit","expr","test","exec","_emit","type","data","e","createEvent","initEvent","createEventObject","eventType","eventName","dispatchEvent","fireEvent","_on","el","types","split","_off","removeEventListener","_addClass","className","classList","add","_removeClass","remove","replace","RegExp","join","_drawerWidth","isCompact","_renderWidth","style","_clearSpace","paddingRight","paddingLeft","marginRight","marginLeft","transform","_holderSpace","opts","space","_backdrop","self","hashId","body","createElement","setAttribute","isPinned","backdropEl","contains","appendChild","isOpen","display","removeChild","_transitionIn","pos","height","_transitionOut","_transitionEnd","transEndEventNames","WebkitTransition","MozTransition","OTransition","transition","name","undefined","_addFakeHeight","backgroundColor","getComputedStyle","_removeFakeHeight","_setState","value","String","localStorage","setItem","JSON","stringify","parse","getItem","opacity","visibility","hasChildNodes","children","Array","prototype","forEach","call","stopPropagation","position","custom","setTimeout","namespace","msg","err","console","warn","removeItem","method","isFixed","offsetHeight","overflow","toggle","getWidth","setWidth","getCompactWidth","setCompactWidth","minHeight","maxWidth","top","right","bottom","left","elem","prop","regElem","regProp","target","color"],"mappings":"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"}